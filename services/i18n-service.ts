"use client"

import React from "react"

/**
 * Internationalization Service
 *
 * This service handles multi-language support for the application
 * including Hindi, Gujarati, Tamil, and other Indian languages.
 */

// Language definitions
export const SUPPORTED_LANGUAGES = {
  en: { name: "English", nativeName: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
  hi: { name: "Hindi", nativeName: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│" },
  gu: { name: "Gujarati", nativeName: "ркЧрлБркЬрк░рк╛ркдрлА", flag: "ЁЯЗоЁЯЗ│" },
  ta: { name: "Tamil", nativeName: "родрооро┐ро┤рпН", flag: "ЁЯЗоЁЯЗ│" },
  te: { name: "Telugu", nativeName: "р░др▒Жр░▓р▒Бр░Чр▒Б", flag: "ЁЯЗоЁЯЗ│" },
  kn: { name: "Kannada", nativeName: "р▓Хр▓ир│Нр▓ир▓б", flag: "ЁЯЗоЁЯЗ│" },
  ml: { name: "Malayalam", nativeName: "р┤ор┤▓р┤пр┤╛р┤│р┤В", flag: "ЁЯЗоЁЯЗ│" },
  bn: { name: "Bengali", nativeName: "ржмрж╛ржВрж▓рж╛", flag: "ЁЯЗоЁЯЗ│" },
  mr: { name: "Marathi", nativeName: "рдорд░рд╛рдареА", flag: "ЁЯЗоЁЯЗ│" },
  pa: { name: "Punjabi", nativeName: "рикрй░риЬри╛римрйА", flag: "ЁЯЗоЁЯЗ│" },
}

// Translation keys and default values
const translations: Record<string, Record<string, string>> = {
  en: {
    // Navigation
    "nav.dashboard": "Dashboard",
    "nav.invoices": "Invoices",
    "nav.products": "Products",
    "nav.customers": "Customers",
    "nav.reports": "Reports",
    "nav.settings": "Settings",

    // Dashboard
    "dashboard.title": "Dashboard",
    "dashboard.welcome": "Welcome back! Here's what's happening with your business.",
    "dashboard.totalSales": "Total Sales",
    "dashboard.totalPurchases": "Total Purchases",
    "dashboard.paymentsReceived": "Payments Received",
    "dashboard.pendingDues": "Pending Dues",

    // Invoices
    "invoices.title": "Invoices",
    "invoices.create": "Create Invoice",
    "invoices.number": "Invoice Number",
    "invoices.customer": "Customer",
    "invoices.amount": "Amount",
    "invoices.date": "Date",
    "invoices.dueDate": "Due Date",
    "invoices.status": "Status",
    "invoices.paid": "Paid",
    "invoices.pending": "Pending",
    "invoices.overdue": "Overdue",

    // Products
    "products.title": "Products & Inventory",
    "products.add": "Add Product",
    "products.name": "Product Name",
    "products.category": "Category",
    "products.price": "Price",
    "products.stock": "Stock",
    "products.lowStock": "Low Stock",

    // Customers
    "customers.title": "Customers",
    "customers.add": "Add Customer",
    "customers.name": "Customer Name",
    "customers.email": "Email",
    "customers.phone": "Phone",
    "customers.totalSales": "Total Sales",
    "customers.outstanding": "Outstanding",

    // Common
    "common.save": "Save",
    "common.cancel": "Cancel",
    "common.edit": "Edit",
    "common.delete": "Delete",
    "common.search": "Search",
    "common.filter": "Filter",
    "common.export": "Export",
    "common.import": "Import",
    "common.loading": "Loading...",
    "common.noData": "No data available",
    "common.error": "An error occurred",
    "common.success": "Operation completed successfully",

    // GST REMOVED

    // Currency
    "currency.inr": "тВ╣",
    "currency.rupees": "Rupees",
    "currency.paise": "Paise",
  },

  hi: {
    // Navigation
    "nav.dashboard": "рдбреИрд╢рдмреЛрд░реНрдб",
    "nav.invoices": "рдмрд┐рд▓",
    "nav.products": "рдЙрддреНрдкрд╛рдж",
    "nav.customers": "рдЧреНрд░рд╛рд╣рдХ",
    "nav.reports": "рд░рд┐рдкреЛрд░реНрдЯ",
    "nav.settings": "рд╕реЗрдЯрд┐рдВрдЧреНрд╕",

    // Dashboard
    "dashboard.title": "рдбреИрд╢рдмреЛрд░реНрдб",
    "dashboard.welcome": "рд╡рд╛рдкрд╕ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдпрд╣рд╛рдБ рдЖрдкрдХреЗ рд╡реНрдпрд╡рд╕рд╛рдп рдХреЗ рд╕рд╛рде рдХреНрдпрд╛ рд╣реЛ рд░рд╣рд╛ рд╣реИред",
    "dashboard.totalSales": "рдХреБрд▓ рдмрд┐рдХреНрд░реА",
    "dashboard.totalPurchases": "рдХреБрд▓ рдЦрд░реАрджрд╛рд░реА",
    "dashboard.paymentsReceived": "рдкреНрд░рд╛рдкреНрдд рднреБрдЧрддрд╛рди",
    "dashboard.pendingDues": "рд▓рдВрдмрд┐рдд рдмрдХрд╛рдпрд╛",

    // Invoices
    "invoices.title": "рдмрд┐рд▓",
    "invoices.create": "рдмрд┐рд▓ рдмрдирд╛рдПрдВ",
    "invoices.number": "рдмрд┐рд▓ рд╕рдВрдЦреНрдпрд╛",
    "invoices.customer": "рдЧреНрд░рд╛рд╣рдХ",
    "invoices.amount": "рд░рд╛рд╢рд┐",
    "invoices.date": "рджрд┐рдирд╛рдВрдХ",
    "invoices.dueDate": "рджреЗрдп рддрд┐рдерд┐",
    "invoices.status": "рд╕реНрдерд┐рддрд┐",
    "invoices.paid": "рднреБрдЧрддрд╛рди рдХрд┐рдпрд╛ рдЧрдпрд╛",
    "invoices.pending": "рд▓рдВрдмрд┐рдд",
    "invoices.overdue": "рдЕрддрд┐рджреЗрдп",

    // Products
    "products.title": "рдЙрддреНрдкрд╛рдж рдФрд░ рдЗрдиреНрд╡реЗрдВрдЯрд░реА",
    "products.add": "рдЙрддреНрдкрд╛рдж рдЬреЛрдбрд╝реЗрдВ",
    "products.name": "рдЙрддреНрдкрд╛рдж рдХрд╛ рдирд╛рдо",
    "products.category": "рд╢реНрд░реЗрдгреА",
    "products.price": "рдореВрд▓реНрдп",
    "products.stock": "рд╕реНрдЯреЙрдХ",
    "products.lowStock": "рдХрдо рд╕реНрдЯреЙрдХ",

    // Customers
    "customers.title": "рдЧреНрд░рд╛рд╣рдХ",
    "customers.add": "рдЧреНрд░рд╛рд╣рдХ рдЬреЛрдбрд╝реЗрдВ",
    "customers.name": "рдЧреНрд░рд╛рд╣рдХ рдХрд╛ рдирд╛рдо",
    "customers.email": "рдИрдореЗрд▓",
    "customers.phone": "рдлреЛрди",
    "customers.totalSales": "рдХреБрд▓ рдмрд┐рдХреНрд░реА",
    "customers.outstanding": "рдмрдХрд╛рдпрд╛",

    // Common
    "common.save": "рд╕реЗрд╡ рдХрд░реЗрдВ",
    "common.cancel": "рд░рджреНрдж рдХрд░реЗрдВ",
    "common.edit": "рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ",
    "common.delete": "рд╣рдЯрд╛рдПрдВ",
    "common.search": "рдЦреЛрдЬреЗрдВ",
    "common.filter": "рдлрд┐рд▓реНрдЯрд░",
    "common.export": "рдирд┐рд░реНрдпрд╛рдд",
    "common.import": "рдЖрдпрд╛рдд",
    "common.loading": "рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    "common.noData": "рдХреЛрдИ рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ",
    "common.error": "рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИ",
    "common.success": "рдСрдкрд░реЗрд╢рди рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреВрд░рд╛ рд╣реБрдЖ",

    // GST REMOVED

    // Currency
    "currency.inr": "тВ╣",
    "currency.rupees": "рд░реБрдкрдпреЗ",
    "currency.paise": "рдкреИрд╕реЗ",
  },

  gu: {
    // Navigation
    "nav.dashboard": "ркбрлЗрк╢ркмрлЛрк░рлНркб",
    "nav.invoices": "ркмрк┐рк▓",
    "nav.products": "ркЙркдрлНрккрк╛ркжркирлЛ",
    "nav.customers": "ркЧрлНрк░рк╛рк╣ркХрлЛ",
    "nav.reports": "рк░рк┐рккрлЛрк░рлНркЯрлНрк╕",
    "nav.settings": "рк╕рлЗркЯрк┐ркВркЧрлНрк╕",

    // Dashboard
    "dashboard.title": "ркбрлЗрк╢ркмрлЛрк░рлНркб",
    "dashboard.welcome": "рккрк╛ркЫрк╛ ркЖрк╡рк╡рк╛ ркмркжрк▓ ркЖркнрк╛рк░! ркЕрк╣рлАркВ ркдркорк╛рк░рк╛ рк╡рлНркпрк╡рк╕рк╛ркп рк╕рк╛ркерлЗ рк╢рлБркВ ркеркИ рк░рк╣рлНркпрлБркВ ркЫрлЗ.",
    "dashboard.totalSales": "ркХрлБрк▓ рк╡рлЗркЪрк╛ркг",
    "dashboard.totalPurchases": "ркХрлБрк▓ ркЦрк░рлАркжрлА",
    "dashboard.paymentsReceived": "рккрлНрк░рк╛рккрлНркд ркЪрлБркХрк╡ркгрлАркУ",
    "dashboard.pendingDues": "ркмрк╛ркХрлА рк░ркХрко",

    // Common
    "common.save": "рк╕рлЗрк╡ ркХрк░рлЛ",
    "common.cancel": "рк░ркж ркХрк░рлЛ",
    "common.edit": "рк╕ркВрккрк╛ркжрк┐ркд ркХрк░рлЛ",
    "common.delete": "ркХрк╛ркврлА ркирк╛ркЦрлЛ",
    "common.search": "рк╢рлЛркзрлЛ",
    "common.filter": "рклрк┐рк▓рлНркЯрк░",
    "common.export": "ркирк┐ркХрк╛рк╕",
    "common.import": "ркЖркпрк╛ркд",
    "common.loading": "рк▓рлЛркб ркеркИ рк░рк╣рлНркпрлБркВ ркЫрлЗ...",
    "common.noData": "ркХрлЛркИ ркбрлЗркЯрк╛ ркЙрккрк▓ркмрлНркз ркиркерлА",
    "common.error": "ркПркХ ркнрлВрк▓ ркЖрк╡рлА",
    "common.success": "ркУрккрк░рлЗрк╢рки рк╕рклрк│ркдрк╛рккрлВрк░рлНрк╡ркХ рккрлВрк░рлНркг ркеркпрлБркВ",

    // Currency
    "currency.inr": "тВ╣",
    "currency.rupees": "рк░рлВрккрк┐ркпрк╛",
    "currency.paise": "рккрлИрк╕рк╛",
  },

  ta: {
    // Navigation
    "nav.dashboard": "роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ",
    "nav.invoices": "рокро┐ро▓рпНроХро│рпН",
    "nav.products": "родропро╛ро░ро┐рокрпНрокрпБроХро│рпН",
    "nav.customers": "ро╡ро╛роЯро┐роХрпНроХрпИропро╛ро│ро░рпНроХро│рпН",
    "nav.reports": "роЕро▒ро┐роХрпНроХрпИроХро│рпН",
    "nav.settings": "роЕроорпИрокрпНрокрпБроХро│рпН",

    // Dashboard
    "dashboard.title": "роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ",
    "dashboard.welcome": "роорпАрогрпНроЯрпБроорпН ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН! роЙроЩрпНроХро│рпН ро╡рогро┐роХродрпНродро┐ро▓рпН роОройрпНрой роироЯроХрпНроХро┐ро▒родрпБ роОройрпНрокродрпБ роЗроЩрпНроХрпЗ.",
    "dashboard.totalSales": "роорпКродрпНрод ро╡ро┐ро▒рпНрокройрпИ",
    "dashboard.totalPurchases": "роорпКродрпНрод роХрпКро│рпНроорпБродро▓рпН",
    "dashboard.paymentsReceived": "рокрпЖро▒рокрпНрокроЯрпНроЯ роХрпКроЯрпБрокрпНрокройро╡рпБроХро│рпН",
    "dashboard.pendingDues": "роиро┐ро▓рпБро╡рпИропро┐ро▓рпН роЙро│рпНро│ родрпКроХрпИ",

    // Common
    "common.save": "роЪрпЗрооро┐роХрпНроХро╡рпБроорпН",
    "common.cancel": "ро░родрпНродрпБ роЪрпЖропрпНропро╡рпБроорпН",
    "common.edit": "родро┐ро░рпБродрпНродро╡рпБроорпН",
    "common.delete": "роирпАроХрпНроХро╡рпБроорпН",
    "common.search": "родрпЗроЯро╡рпБроорпН",
    "common.filter": "ро╡роЯро┐роХроЯрпНроЯро┐",
    "common.export": "роПро▒рпНро▒рпБроородро┐",
    "common.import": "роЗро▒роХрпНроХрпБроородро┐",
    "common.loading": "роПро▒рпНро▒рпБроХро┐ро▒родрпБ...",
    "common.noData": "родро░ро╡рпБ роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ",
    "common.error": "роТро░рпБ рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ",
    "common.success": "роЪрпЖропро▓рпНрокро╛роЯрпБ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роорпБроЯро┐роирпНродродрпБ",

    // Currency
    "currency.inr": "тВ╣",
    "currency.rupees": "ро░рпВрокро╛ропрпН",
    "currency.paise": "рокрпИроЪро╛",
  },
}

// Current language state
let currentLanguage = "en"

/**
 * Set the current language
 */
export function setLanguage(language: string): void {
  if (SUPPORTED_LANGUAGES[language as keyof typeof SUPPORTED_LANGUAGES]) {
    currentLanguage = language
    localStorage.setItem("myinvoicebook_language", language)

    // Trigger language change event
    window.dispatchEvent(new CustomEvent("languageChanged", { detail: language }))
  }
}

/**
 * Get the current language
 */
export function getCurrentLanguage(): string {
  return currentLanguage
}

/**
 * Initialize language from localStorage or browser preference
 */
export function initializeLanguage(): void {
  const savedLanguage = localStorage.getItem("myinvoicebook_language")
  const browserLanguage = navigator.language.split("-")[0]

  if (savedLanguage && SUPPORTED_LANGUAGES[savedLanguage as keyof typeof SUPPORTED_LANGUAGES]) {
    currentLanguage = savedLanguage
  } else if (SUPPORTED_LANGUAGES[browserLanguage as keyof typeof SUPPORTED_LANGUAGES]) {
    currentLanguage = browserLanguage
  } else {
    currentLanguage = "en"
  }
}

/**
 * Translate a key to the current language
 */
export function t(key: string, fallback?: string): string {
  const languageTranslations = translations[currentLanguage] || translations.en
  return languageTranslations[key] || translations.en[key] || fallback || key
}

/**
 * Get all translations for a specific language
 */
export function getTranslations(language: string): Record<string, string> {
  return translations[language] || translations.en
}

/**
 * Add or update translations for a language
 */
export function addTranslations(language: string, newTranslations: Record<string, string>): void {
  if (!translations[language]) {
    translations[language] = {}
  }

  translations[language] = {
    ...translations[language],
    ...newTranslations,
  }
}

/**
 * Format currency based on language
 */
export function formatCurrency(amount: number, language?: string): string {
  const lang = language || currentLanguage
  const currencySymbol = t("currency.inr")

  // Format number based on Indian numbering system
  const formatter = new Intl.NumberFormat("en-IN", {
    style: "currency",
    currency: "INR",
    minimumFractionDigits: 2,
  })

  return formatter.format(amount).replace("тВ╣", currencySymbol)
}

/**
 * Format date based on language
 */
export function formatDate(date: Date, language?: string): string {
  const lang = language || currentLanguage

  const formatters: Record<string, Intl.DateTimeFormat> = {
    en: new Intl.DateTimeFormat("en-IN"),
    hi: new Intl.DateTimeFormat("hi-IN"),
    gu: new Intl.DateTimeFormat("gu-IN"),
    ta: new Intl.DateTimeFormat("ta-IN"),
    te: new Intl.DateTimeFormat("te-IN"),
    kn: new Intl.DateTimeFormat("kn-IN"),
    ml: new Intl.DateTimeFormat("ml-IN"),
    bn: new Intl.DateTimeFormat("bn-IN"),
    mr: new Intl.DateTimeFormat("mr-IN"),
    pa: new Intl.DateTimeFormat("pa-IN"),
  }

  const formatter = formatters[lang] || formatters.en
  return formatter.format(date)
}

/**
 * Get text direction for the language (RTL/LTR)
 */
export function getTextDirection(language?: string): "ltr" | "rtl" {
  const lang = language || currentLanguage

  // Most Indian languages are LTR
  // Add RTL languages here if needed (like Urdu)
  const rtlLanguages = ["ur", "ar"]

  return rtlLanguages.includes(lang) ? "rtl" : "ltr"
}

/**
 * React hook for translations
 */
export function useTranslation() {
  const [language, setCurrentLanguage] = React.useState(currentLanguage)

  React.useEffect(() => {
    const handleLanguageChange = (event: CustomEvent) => {
      setCurrentLanguage(event.detail)
    }

    window.addEventListener("languageChanged", handleLanguageChange as EventListener)

    return () => {
      window.removeEventListener("languageChanged", handleLanguageChange as EventListener)
    }
  }, [])

  return {
    t,
    language,
    setLanguage,
    formatCurrency,
    formatDate,
    getTextDirection: () => getTextDirection(language),
  }
}
